import { initDB } from 'db/init';
import { secretsTable } from 'db/schema';
import { stringify, parse } from 'envfile';
import { appendFile, readFile, writeFile } from 'fs/promises';
import { resolve } from 'path';
import { cwd } from 'process';
import { VaultDBConfig } from 'types/config';

type Env = Record<string, string>;

const encoding: BufferEncoding = 'utf-8';

export async function syncEnv(
  filePath: string,
  envVars: Env,
  append = false,
) {
  const fullPath = resolve(cwd(), filePath);

  const envAsString = stringify(envVars);

  const envContent = `# generated by deadrop\n\n${envAsString}\n`;

  if (append) await appendFile(fullPath, `\n${envContent}`, encoding);
  else await writeFile(fullPath, envContent, encoding);
}

export async function loadEnvFromFile(filePath: string) {
  const fullPath = resolve(cwd(), filePath);
  console.log(fullPath);
  const envContent = await readFile(fullPath, encoding);

  const parsedEnv = parse(envContent);

  return parsedEnv;
}

export async function addEnvToVault(
  envPath: string,
  vault: VaultDBConfig,
) {
  const envVars = await loadEnvFromFile(envPath);

  const db = initDB(vault.location, vault.key);

  const secretsToAdd = Object.entries(envVars).map(
    ([key, value]) => ({
      name: key,
      value,
    }),
  );
  console.log(secretsToAdd);
  return db.insert(secretsTable).values(secretsToAdd).run();
}
